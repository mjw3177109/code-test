//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./todo_types');
//HELPER FUNCTIONS AND STRUCTURES

var Todo_getTodoList_args = function(args) {
};
Todo_getTodoList_args.prototype = {};
Todo_getTodoList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Todo_getTodoList_args.prototype.write = function(output) {
  output.writeStructBegin('Todo_getTodoList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Todo_getTodoList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ListItem]);
    }
  }
};
Todo_getTodoList_result.prototype = {};
Todo_getTodoList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ListItem();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Todo_getTodoList_result.prototype.write = function(output) {
  output.writeStructBegin('Todo_getTodoList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Todo_getTotalLength_args = function(args) {
  this.author = null;
  if (args) {
    if (args.author !== undefined && args.author !== null) {
      this.author = args.author;
    }
  }
};
Todo_getTotalLength_args.prototype = {};
Todo_getTotalLength_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Todo_getTotalLength_args.prototype.write = function(output) {
  output.writeStructBegin('Todo_getTotalLength_args');
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 1);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Todo_getTotalLength_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Todo_getTotalLength_result.prototype = {};
Todo_getTotalLength_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Todo_getTotalLength_result.prototype.write = function(output) {
  output.writeStructBegin('Todo_getTotalLength_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Todo_postTodo_args = function(args) {
  this.item = null;
  if (args) {
    if (args.item !== undefined && args.item !== null) {
      this.item = new ttypes.PostItem(args.item);
    }
  }
};
Todo_postTodo_args.prototype = {};
Todo_postTodo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.item = new ttypes.PostItem();
        this.item.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Todo_postTodo_args.prototype.write = function(output) {
  output.writeStructBegin('Todo_postTodo_args');
  if (this.item !== null && this.item !== undefined) {
    output.writeFieldBegin('item', Thrift.Type.STRUCT, 1);
    this.item.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Todo_postTodo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Todo_postTodo_result.prototype = {};
Todo_postTodo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BYTE) {
        this.success = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Todo_postTodo_result.prototype.write = function(output) {
  output.writeStructBegin('Todo_postTodo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BYTE, 0);
    output.writeByte(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Todo_doneArtical_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Todo_doneArtical_args.prototype = {};
Todo_doneArtical_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Todo_doneArtical_args.prototype.write = function(output) {
  output.writeStructBegin('Todo_doneArtical_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Todo_doneArtical_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ListItem(args.success);
    }
  }
};
Todo_doneArtical_result.prototype = {};
Todo_doneArtical_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ListItem();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Todo_doneArtical_result.prototype.write = function(output) {
  output.writeStructBegin('Todo_doneArtical_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Todo_deleteArtical_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Todo_deleteArtical_args.prototype = {};
Todo_deleteArtical_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Todo_deleteArtical_args.prototype.write = function(output) {
  output.writeStructBegin('Todo_deleteArtical_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Todo_deleteArtical_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ListItem(args.success);
    }
  }
};
Todo_deleteArtical_result.prototype = {};
Todo_deleteArtical_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ListItem();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Todo_deleteArtical_result.prototype.write = function(output) {
  output.writeStructBegin('Todo_deleteArtical_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TodoClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
TodoClient.prototype = {};
TodoClient.prototype.seqid = function() { return this._seqid; };
TodoClient.prototype.new_seqid = function() { return this._seqid += 1; };
TodoClient.prototype.getTodoList = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTodoList();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTodoList();
  }
};

TodoClient.prototype.send_getTodoList = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTodoList', Thrift.MessageType.CALL, this.seqid());
  var args = new Todo_getTodoList_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TodoClient.prototype.recv_getTodoList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Todo_getTodoList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTodoList failed: unknown result');
};
TodoClient.prototype.getTotalLength = function(author, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTotalLength(author);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTotalLength(author);
  }
};

TodoClient.prototype.send_getTotalLength = function(author) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTotalLength', Thrift.MessageType.CALL, this.seqid());
  var params = {
    author: author
  };
  var args = new Todo_getTotalLength_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TodoClient.prototype.recv_getTotalLength = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Todo_getTotalLength_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTotalLength failed: unknown result');
};
TodoClient.prototype.postTodo = function(item, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_postTodo(item);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_postTodo(item);
  }
};

TodoClient.prototype.send_postTodo = function(item) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('postTodo', Thrift.MessageType.CALL, this.seqid());
  var params = {
    item: item
  };
  var args = new Todo_postTodo_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TodoClient.prototype.recv_postTodo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Todo_postTodo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('postTodo failed: unknown result');
};
TodoClient.prototype.doneArtical = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_doneArtical(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_doneArtical(id);
  }
};

TodoClient.prototype.send_doneArtical = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('doneArtical', Thrift.MessageType.CALL, this.seqid());
  var params = {
    id: id
  };
  var args = new Todo_doneArtical_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TodoClient.prototype.recv_doneArtical = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Todo_doneArtical_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('doneArtical failed: unknown result');
};
TodoClient.prototype.deleteArtical = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteArtical(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteArtical(id);
  }
};

TodoClient.prototype.send_deleteArtical = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteArtical', Thrift.MessageType.CALL, this.seqid());
  var params = {
    id: id
  };
  var args = new Todo_deleteArtical_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TodoClient.prototype.recv_deleteArtical = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Todo_deleteArtical_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteArtical failed: unknown result');
};
var TodoProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
TodoProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
TodoProcessor.prototype.process_getTodoList = function(seqid, input, output) {
  var args = new Todo_getTodoList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTodoList.length === 0) {
    Q.fcall(this._handler.getTodoList.bind(this._handler))
      .then(function(result) {
        var result_obj = new Todo_getTodoList_result({success: result});
        output.writeMessageBegin("getTodoList", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTodoList", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTodoList(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Todo_getTodoList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTodoList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTodoList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TodoProcessor.prototype.process_getTotalLength = function(seqid, input, output) {
  var args = new Todo_getTotalLength_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTotalLength.length === 1) {
    Q.fcall(this._handler.getTotalLength.bind(this._handler), args.author)
      .then(function(result) {
        var result_obj = new Todo_getTotalLength_result({success: result});
        output.writeMessageBegin("getTotalLength", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTotalLength", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTotalLength(args.author, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Todo_getTotalLength_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTotalLength", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTotalLength", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TodoProcessor.prototype.process_postTodo = function(seqid, input, output) {
  var args = new Todo_postTodo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.postTodo.length === 1) {
    Q.fcall(this._handler.postTodo.bind(this._handler), args.item)
      .then(function(result) {
        var result_obj = new Todo_postTodo_result({success: result});
        output.writeMessageBegin("postTodo", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("postTodo", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.postTodo(args.item, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Todo_postTodo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("postTodo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("postTodo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TodoProcessor.prototype.process_doneArtical = function(seqid, input, output) {
  var args = new Todo_doneArtical_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.doneArtical.length === 1) {
    Q.fcall(this._handler.doneArtical.bind(this._handler), args.id)
      .then(function(result) {
        var result_obj = new Todo_doneArtical_result({success: result});
        output.writeMessageBegin("doneArtical", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("doneArtical", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.doneArtical(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Todo_doneArtical_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("doneArtical", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("doneArtical", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TodoProcessor.prototype.process_deleteArtical = function(seqid, input, output) {
  var args = new Todo_deleteArtical_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteArtical.length === 1) {
    Q.fcall(this._handler.deleteArtical.bind(this._handler), args.id)
      .then(function(result) {
        var result_obj = new Todo_deleteArtical_result({success: result});
        output.writeMessageBegin("deleteArtical", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteArtical", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteArtical(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Todo_deleteArtical_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteArtical", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteArtical", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
